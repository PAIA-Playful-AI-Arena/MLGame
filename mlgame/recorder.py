import pickle
import time
import os

from .execution_command import GameMode

def get_recorder(game_name, game_params, game_mode, record_progress):
    """
    The helper function for generating a recorder object
    """
    if not record_progress:
        return DummyRecorder()

    root_dir_path = os.path.dirname(os.path.dirname(__file__))
    log_dir_path = os.path.join(root_dir_path, "games", game_name, "log")

    game_params_str = [str(p) for p in game_params]
    filename_prefix = "manual" if game_mode == GameMode.MANUAL else "ml"
    if game_params_str:
        filename_prefix += "_" + "_".join(game_params_str)

    return Recorder(log_dir_path, filename_prefix)

class Recorder:
    """
    Record the scene information and the game command to the file
    """
    def __init__(self, saving_directory, filename_prefix = ""):
        """
        Constructor

        @param saving_directory Specify the directory for saving files
        @param filename_prefix Specify the prefix of the filename to be generated.
               The filename will be "<prefix>_YYYY-MM-DD_hh-mm-ss.pickle".
        """
        self._saving_directory = saving_directory
        if not isinstance(filename_prefix, str):
            raise TypeError("'filename_prefix' should be the type of 'str'")
        self._filename_prefix = filename_prefix

        self._scene_info_list = []
        self._command_list = []
        self._create_directory()

    def _create_directory(self):
        if not os.path.exists(self._saving_directory):
            os.mkdir(self._saving_directory)

    def record(self, scene_info, command):
        """
        Record the scene information and the command

        The received scene information will be stored in a list.

        @param scene_info The scene information generated by the game
        @param command The commands received from ml clients or keyboards
        """
        self._scene_info_list.append(scene_info)
        self._command_list.append(command)

    def flush_to_file(self):
        """
        Flush the stored objects to the file
        """
        filename = time.strftime("%Y-%m-%d_%H-%M-%S") + ".pickle"

        if self._filename_prefix:
            filename = self._filename_prefix + "_" + filename

        filepath = os.path.join(self._saving_directory, filename)
        with open(filepath, "wb") as f:
            pickle.dump({
                "scene_info": self._scene_info_list,
                "command": self._command_list
            }, f)

        self._scene_info_list.clear()
        self._command_list.clear()

class DummyRecorder:
    """
    The recorder that only proivdes the API of `Recorder` but do nothing
    """
    def __init__(self):
        pass

    def record(self, scene_info, commands):
        pass

    def flush_to_file(self):
        pass
